# -*- coding: utf-8 -*-
"""CS_lecture_colab_1.1.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bokXMyPhHE9dWL9fJyme9MKbuqctj8XY

## CS_lecture_colab_1.1.1

https://github.com/LambdaSchool/Intro-Python-I

https://github.com/LambdaSchool/Intro-Python-I/tree/master/src
"""

# 0
# https://github.com/LambdaSchool/Intro-Python-I/blob/master/src/00_hello.py
print("Hello, world!")

# 1
# https://github.com/LambdaSchool/Intro-Python-I/blob/master/src/01_bignum.py
# Print out 2 to the 65536 power
# (try doing the same thing in the JS console and see what it outputs)

# YOUR CODE HERE
print(2 ** 65536)

# 2
# https://github.com/LambdaSchool/Intro-Python-I/blob/master/src/02_datatypes.py


x = 5
y = "7"

# Write a print statement that combines x + y into the integer value 12

print(x + int(y), "is the combined int.")


# Write a print statement that combines x + y into the string value 57

print(str(x) + y, "is the combined str.")

# 3
# https://github.com/LambdaSchool/Intro-Python-I/blob/master/src/03_modules.py

import sys
# See docs for the sys module: https://docs.python.org/3.7/library/sys.html

# Print out the command line arguments in sys.argv, one per line:
print ("list of command line arguments passed to a Python script:", sys.argv)

# Print out the OS platform you're using:
print("operating system:", sys.platform)

# Print out the version of Python you're using:
print ("python version:", sys.version)


import os
# See the docs for the OS module: https://docs.python.org/3.7/library/os.html
# https://docs.python.org/3.7/library/os.html

# Print the current process ID
print("current process id:", os.getpid())
print("parent process id:", os.getppid())

# Print the current working directory (cwd)
print("current working directory:", os.getcwd())

# Print out your machine's login name
# doesn't work on colab
#print("login name:", os.getlogin())

# see: https://stackoverflow.com/questions/5082452/string-formatting-vs-format

sub1 = "python string!"
sub2 = "an arg"

a = "i am a %s" % sub1
b = "i am a {0}".format(sub1)

c = "with %(kwarg)s!" % {'kwarg':sub2}
d = "with {kwarg}!".format(kwarg=sub2)

print (a)    # "i am a python string!"
print (b)    # "i am a python string!"
print (c)    # "with an arg!"
print (d)    # "with an arg!"

# 4
# https://github.com/LambdaSchool/Intro-Python-I/blob/master/src/04_printing.py

# see: https://stackoverflow.com/questions/5082452/string-formatting-vs-format

x = 10
y = 2.24552
z = "I like turtles!"

# not so clear: https://python-reference.readthedocs.io/en/latest/docs/str/formatting.html
# Using the printf operator (%), print the following feeding in the values of x, y, and z:
# x is 10, y is 2.25, z is "I like turtles!"
print('x is %(x)d, y is %(y)1.5f, z is "%(z)s"' % {"x": 10, "y": 2.24552, "z": "I like turtles!"})

# https://www.programiz.com/python-programming/methods/string/format
# Use the 'format' string method to print the same thing
# default arguments
print('x is {}, y is {}, z is "{}"'.format(10, 2.24552, "I like turtles!"))

# Finally, print the same thing using an f-string
print(f'x is {x}, y is {y}, z is "{z}"')

# 5
# https://github.com/LambdaSchool/Intro-Python-I/blob/master/src/05_lists.py

# For the exercise, look up the methods and functions that are available for use
# with Python lists.

x = [1, 2, 3]
y = [8, 9, 10]

# For the following, DO NOT USE AN ASSIGNMENT (=).

# Change x so that it is [1, 2, 3, 4]
x.append(4)
print(x)

# Using y, change x so that it is [1, 2, 3, 4, 8, 9, 10]
#x = x + y
x.extend(y)
print(x)

# Change x so that it is [1, 2, 3, 4, 9, 10]
# YOUR CODE HERE
x.remove(8)
print(x)

# Change x so that it is [1, 2, 3, 4, 9, 99, 10]
x.insert(-1,99)
print(x)

# Print the length of list x
print(len(x))

# Print all the values in x multiplied by 1000
print([i * 1000 for i in x])

# 6
# https://github.com/LambdaSchool/Intro-Python-I/blob/master/src/06_tuples.py

# Write a function `print_tuple` that prints all the values in a tuple
t = (1, 2, 5, 7, 99)
def print_tuple(tuple):
    for i in range (0,len(tuple)):
        print(tuple[i])
    return 
print_tuple(t)  # Prints 1 2 5 7 99, one per line

# Declare a tuple of 1 element then print it
u = (1,)  # What needs to be added to make this work?
print("a comma is needed in the declaration of a tuple")
print_tuple(u)

# 7
# https://github.com/LambdaSchool/Intro-Python-I/blob/master/src/07_slices.py
# overview: https://stackoverflow.com/a/509295

a = [2, 4, 1, 7, 9, 6]

# Output the second element: 4:
print(a[1])

# Output the second-to-last element: 9
print(a[1:])

# Output the last three elements in the array: [7, 9, 6]
print(a[-3:])

# Output the two middle elements in the array: [1, 7]
print(a[-4:4])

# Output every element except the first one: [4, 1, 7, 9, 6]
print(a[1:])

# Output every element except the last one: [2, 4, 1, 7, 9]
print(a[:-1])

# For string s...

s = "Hello, world!"

# Output just the 8th-12th characters: "world"
print(s[7:12])
print(s[-6:-1])

# 8
# https://github.com/LambdaSchool/Intro-Python-I/blob/master/src/08_comprehensions.py

# Take a look at https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions

# Write a list comprehension to produce the array [1, 2, 3, 4, 5]

y = []
y = list(map(lambda x: x+1, range(5)))
#or
y = [x+1 for x in range(5)]
print (y)

# Write a list comprehension to produce the cubes of the numbers 0-9:
# [0, 1, 8, 27, 64, 125, 216, 343, 512, 729]

y = []
y = [x**3 for x in range(10)]
print(y)

# Write a list comprehension to produce the uppercase version of all the
# elements in array a. Hint: "foo".upper() is "FOO".

a = ["foo", "bar", "baz"]
y = [x.upper() for x in a]
print(y)

# Use a list comprehension to create a list containing only the _even_ elements
# the user entered into list x.

x = input("Enter comma-separated numbers: ").split(',')

x = list(x)

print(x)
print(type(x))
#x = [4,5,6]

#x = int(i)

# What do you need between the square brackets to make it work?
y = [int(i) for i in x if int(i)%2 == 0]

print(y)

# 9
# https://github.com/LambdaSchool/Intro-Python-I/blob/master/src/09_dictionaries.py

# 

waypoints = [
    {
        "lat": 43,
        "lon": -121,
        "name": "a place"
    },
    {
        "lat": 41,
        "lon": -123,
        "name": "another place"
    },
    {
        "lat": 43,
        "lon": -122,
        "name": "a third place"
    }
]

# Add a new waypoint to the list
mask1 = {
        "lat": 42,
        "lon": -912,
        "name": "a forth place"
        }
waypoints.append(mask1)
print(waypoints)

# Modify the dictionary with name "a place" such that its longitude
# value is -130 and change its name to "not a real place"
# Note: It's okay to access the dictionary using bracket notation on the
# waypoints list.

waypoints[0]["lon"] = -130
print(waypoints[0]["lon"])

# Write a loop that prints out all the field values for all the waypoints
for i in range (0,len(waypoints)):
    print(waypoints[i].values())

# 10
# https://github.com/LambdaSchool/Intro-Python-I/blob/master/src/10_functions.py
#

# Write a function is_even that will return true if the passed-in number is even.

def is_even(number):
    if number%2 == 0:
        return True
    else:
        pass

is_even(3)
is_even(4)

# Read a number from the keyboard
num = input("Enter a number: ")
num = int(num)

# Print out "Even!" if the number is even. Otherwise print "Odd"

def is_even2(num):
    if num%2 == 0:
        return print("Even!")
    else:
        return print("Odd")

is_even2(num)

def f2(list_add):
    sum = 0
    for i in list_add:
        sum += i
    return sum

a = [7, 6, 5, 4]
f2(a)

# def f3(*args):
#     sum = 0
#     for count, i in args:
#         sum += i
#     return sum





# 11
# https://github.com/LambdaSchool/Intro-Python-I/blob/master/src/11_args.py
#
# Experiment with positional arguments, arbitrary arguments, and keyword
# arguments.

# Write a function f1 that takes two integer positional arguments and returns
# the sum. This is what you'd consider to be a regular, normal function.

def f1(x,y):
    return x+y

print(f1(1, 2))

# Write a function f2 that takes any number of integer arguments and prints the
# sum.
# Note: Google for "python arbitrary arguments" and look for "*args"

def f2(*args):
    sum = 0
    for i in args:
        sum += i
    return sum

print(f2(1))                    # Should print 1
print(f2(1, 3))                 # Should print 4
print(f2(1, 4, -12))            # Should print -7
print(f2(7, 9, 1, 3, 4, 9, 0))  # Should print 33

a = [7, 6, 5, 4]

# How do you have to modify the f2 call below to make this work?
print(f2(a))    # Should print 22

def f2(list_add):
    sum = 0
    for i in list_add:
        sum += i
    return sum

a = [7, 6, 5, 4]
f2(a)

# Write a function f3 that accepts either one or two arguments. If one argument,
# it returns that value plus 1. If two arguments, it returns the sum of the
# arguments.
# Note: Google "python default arguments" for a hint.

def f3(*args):
    sum = 0
    for count, i in args:
        sum += i
    return sum

print(f3(1, 2))  # Should print 3
print(f3(8))     # Should print 9


# Write a function f4 that accepts an arbitrary number of keyword arguments and
# prints out the keys and values like so:
#
# key: foo, value: bar
# key: baz, value: 12
#
# Note: Google "python keyword arguments".

# YOUR CODE HERE

# Should print
# key: a, value: 12
# key: b, value: 30
f4(a=12, b=30)

# Should print
# key: city, value: Berkeley
# key: population, value: 121240
# key: founded, value: "March 23, 1868"
f4(city="Berkeley", population=121240, founded="March 23, 1868")

d = {
    "monster": "goblin",
    "hp": 3
}

# How do you have to modify the f4 call below to make this work?
f4(d)